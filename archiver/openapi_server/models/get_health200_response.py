from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from archiver.openapi_server.models.base_model import Model
from archiver.openapi_server import util


class GetHealth200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status=None, db=None, version=None):  # noqa: E501
        """GetHealth200Response - a model defined in OpenAPI

        :param status: The status of this GetHealth200Response.  # noqa: E501
        :type status: str
        :param db: The db of this GetHealth200Response.  # noqa: E501
        :type db: str
        :param version: The version of this GetHealth200Response.  # noqa: E501
        :type version: str
        """
        self.openapi_types = {
            'status': str,
            'db': str,
            'version': str
        }

        self.attribute_map = {
            'status': 'status',
            'db': 'db',
            'version': 'version'
        }

        self._status = status
        self._db = db
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'GetHealth200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The getHealth_200_response of this GetHealth200Response.  # noqa: E501
        :rtype: GetHealth200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self) -> str:
        """Gets the status of this GetHealth200Response.


        :return: The status of this GetHealth200Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this GetHealth200Response.


        :param status: The status of this GetHealth200Response.
        :type status: str
        """
        allowed_values = ["ok"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def db(self) -> str:
        """Gets the db of this GetHealth200Response.


        :return: The db of this GetHealth200Response.
        :rtype: str
        """
        return self._db

    @db.setter
    def db(self, db: str):
        """Sets the db of this GetHealth200Response.


        :param db: The db of this GetHealth200Response.
        :type db: str
        """
        allowed_values = ["ok", "degraded", "down"]  # noqa: E501
        if db not in allowed_values:
            raise ValueError(
                "Invalid value for `db` ({0}), must be one of {1}"
                .format(db, allowed_values)
            )

        self._db = db

    @property
    def version(self) -> str:
        """Gets the version of this GetHealth200Response.


        :return: The version of this GetHealth200Response.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this GetHealth200Response.


        :param version: The version of this GetHealth200Response.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version
