from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from archiver.openapi_server.models.base_model import Model
from archiver.openapi_server.models.metric import Metric
from archiver.openapi_server import util

from archiver.openapi_server.models.metric import Metric  # noqa: E501

class Measurement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ts=None, run_id=None, test_type=None, tool=None, src=None, dst=None, status=None, duration_s=None, metrics=None, aux=None):  # noqa: E501
        """Measurement - a model defined in OpenAPI

        :param ts: The ts of this Measurement.  # noqa: E501
        :type ts: datetime
        :param run_id: The run_id of this Measurement.  # noqa: E501
        :type run_id: str
        :param test_type: The test_type of this Measurement.  # noqa: E501
        :type test_type: str
        :param tool: The tool of this Measurement.  # noqa: E501
        :type tool: str
        :param src: The src of this Measurement.  # noqa: E501
        :type src: str
        :param dst: The dst of this Measurement.  # noqa: E501
        :type dst: str
        :param status: The status of this Measurement.  # noqa: E501
        :type status: str
        :param duration_s: The duration_s of this Measurement.  # noqa: E501
        :type duration_s: float
        :param metrics: The metrics of this Measurement.  # noqa: E501
        :type metrics: List[Metric]
        :param aux: The aux of this Measurement.  # noqa: E501
        :type aux: object
        """
        self.openapi_types = {
            'ts': datetime,
            'run_id': str,
            'test_type': str,
            'tool': str,
            'src': str,
            'dst': str,
            'status': str,
            'duration_s': float,
            'metrics': List[Metric],
            'aux': object
        }

        self.attribute_map = {
            'ts': 'ts',
            'run_id': 'run_id',
            'test_type': 'test_type',
            'tool': 'tool',
            'src': 'src',
            'dst': 'dst',
            'status': 'status',
            'duration_s': 'duration_s',
            'metrics': 'metrics',
            'aux': 'aux'
        }

        self._ts = ts
        self._run_id = run_id
        self._test_type = test_type
        self._tool = tool
        self._src = src
        self._dst = dst
        self._status = status
        self._duration_s = duration_s
        self._metrics = metrics
        self._aux = aux

    @classmethod
    def from_dict(cls, dikt) -> 'Measurement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Measurement of this Measurement.  # noqa: E501
        :rtype: Measurement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ts(self) -> datetime:
        """Gets the ts of this Measurement.

        Measurement timestamp (UTC)  # noqa: E501

        :return: The ts of this Measurement.
        :rtype: datetime
        """
        return self._ts

    @ts.setter
    def ts(self, ts: datetime):
        """Sets the ts of this Measurement.

        Measurement timestamp (UTC)  # noqa: E501

        :param ts: The ts of this Measurement.
        :type ts: datetime
        """
        if ts is None:
            raise ValueError("Invalid value for `ts`, must not be `None`")  # noqa: E501

        self._ts = ts

    @property
    def run_id(self) -> str:
        """Gets the run_id of this Measurement.

        Unique run identifier (used for idempotency)  # noqa: E501

        :return: The run_id of this Measurement.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id: str):
        """Sets the run_id of this Measurement.

        Unique run identifier (used for idempotency)  # noqa: E501

        :param run_id: The run_id of this Measurement.
        :type run_id: str
        """
        if run_id is None:
            raise ValueError("Invalid value for `run_id`, must not be `None`")  # noqa: E501

        self._run_id = run_id

    @property
    def test_type(self) -> str:
        """Gets the test_type of this Measurement.

        throughput | ping | owamp | twping | trace | mtu | clock | ...  # noqa: E501

        :return: The test_type of this Measurement.
        :rtype: str
        """
        return self._test_type

    @test_type.setter
    def test_type(self, test_type: str):
        """Sets the test_type of this Measurement.

        throughput | ping | owamp | twping | trace | mtu | clock | ...  # noqa: E501

        :param test_type: The test_type of this Measurement.
        :type test_type: str
        """
        if test_type is None:
            raise ValueError("Invalid value for `test_type`, must not be `None`")  # noqa: E501

        self._test_type = test_type

    @property
    def tool(self) -> str:
        """Gets the tool of this Measurement.

        iperf3 | ping | owping | twping | nuttcp | ethr | traceroute | ...  # noqa: E501

        :return: The tool of this Measurement.
        :rtype: str
        """
        return self._tool

    @tool.setter
    def tool(self, tool: str):
        """Sets the tool of this Measurement.

        iperf3 | ping | owping | twping | nuttcp | ethr | traceroute | ...  # noqa: E501

        :param tool: The tool of this Measurement.
        :type tool: str
        """
        if tool is None:
            raise ValueError("Invalid value for `tool`, must not be `None`")  # noqa: E501

        self._tool = tool

    @property
    def src(self) -> str:
        """Gets the src of this Measurement.

        Source host or IP  # noqa: E501

        :return: The src of this Measurement.
        :rtype: str
        """
        return self._src

    @src.setter
    def src(self, src: str):
        """Sets the src of this Measurement.

        Source host or IP  # noqa: E501

        :param src: The src of this Measurement.
        :type src: str
        """

        self._src = src

    @property
    def dst(self) -> str:
        """Gets the dst of this Measurement.

        Destination host/IP/URL  # noqa: E501

        :return: The dst of this Measurement.
        :rtype: str
        """
        return self._dst

    @dst.setter
    def dst(self, dst: str):
        """Sets the dst of this Measurement.

        Destination host/IP/URL  # noqa: E501

        :param dst: The dst of this Measurement.
        :type dst: str
        """

        self._dst = dst

    @property
    def status(self) -> str:
        """Gets the status of this Measurement.

        success | failed | partial | unknown  # noqa: E501

        :return: The status of this Measurement.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Measurement.

        success | failed | partial | unknown  # noqa: E501

        :param status: The status of this Measurement.
        :type status: str
        """

        self._status = status

    @property
    def duration_s(self) -> float:
        """Gets the duration_s of this Measurement.

        Test duration in seconds  # noqa: E501

        :return: The duration_s of this Measurement.
        :rtype: float
        """
        return self._duration_s

    @duration_s.setter
    def duration_s(self, duration_s: float):
        """Sets the duration_s of this Measurement.

        Test duration in seconds  # noqa: E501

        :param duration_s: The duration_s of this Measurement.
        :type duration_s: float
        """

        self._duration_s = duration_s

    @property
    def metrics(self) -> List[Metric]:
        """Gets the metrics of this Measurement.


        :return: The metrics of this Measurement.
        :rtype: List[Metric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics: List[Metric]):
        """Sets the metrics of this Measurement.


        :param metrics: The metrics of this Measurement.
        :type metrics: List[Metric]
        """
        if metrics is None:
            raise ValueError("Invalid value for `metrics`, must not be `None`")  # noqa: E501
        if metrics is not None and len(metrics) < 1:
            raise ValueError("Invalid value for `metrics`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._metrics = metrics

    @property
    def aux(self) -> object:
        """Gets the aux of this Measurement.

        Raw/compact details for drilldown (stored as JSONB)  # noqa: E501

        :return: The aux of this Measurement.
        :rtype: object
        """
        return self._aux

    @aux.setter
    def aux(self, aux: object):
        """Sets the aux of this Measurement.

        Raw/compact details for drilldown (stored as JSONB)  # noqa: E501

        :param aux: The aux of this Measurement.
        :type aux: object
        """

        self._aux = aux
