from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from archiver.openapi_server.models.base_model import Model
from archiver.openapi_server.models.node_ref import NodeRef
from archiver.openapi_server import util

from archiver.openapi_server.models.node_ref import NodeRef  # noqa: E501

class MeasurementRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ts=None, run_id=None, src=None, dst=None, direction=None, raw=None):  # noqa: E501
        """MeasurementRequest - a model defined in OpenAPI

        :param ts: The ts of this MeasurementRequest.  # noqa: E501
        :type ts: datetime
        :param run_id: The run_id of this MeasurementRequest.  # noqa: E501
        :type run_id: str
        :param src: The src of this MeasurementRequest.  # noqa: E501
        :type src: NodeRef
        :param dst: The dst of this MeasurementRequest.  # noqa: E501
        :type dst: NodeRef
        :param direction: The direction of this MeasurementRequest.  # noqa: E501
        :type direction: str
        :param raw: The raw of this MeasurementRequest.  # noqa: E501
        :type raw: Dict[str, object]
        """
        self.openapi_types = {
            'ts': datetime,
            'run_id': str,
            'src': NodeRef,
            'dst': NodeRef,
            'direction': str,
            'raw': Dict[str, object]
        }

        self.attribute_map = {
            'ts': 'ts',
            'run_id': 'run_id',
            'src': 'src',
            'dst': 'dst',
            'direction': 'direction',
            'raw': 'raw'
        }

        self._ts = ts
        self._run_id = run_id
        self._src = src
        self._dst = dst
        self._direction = direction
        self._raw = raw

    @classmethod
    def from_dict(cls, dikt) -> 'MeasurementRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MeasurementRequest of this MeasurementRequest.  # noqa: E501
        :rtype: MeasurementRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ts(self) -> datetime:
        """Gets the ts of this MeasurementRequest.

        Optional override; defaults to now  # noqa: E501

        :return: The ts of this MeasurementRequest.
        :rtype: datetime
        """
        return self._ts

    @ts.setter
    def ts(self, ts: datetime):
        """Sets the ts of this MeasurementRequest.

        Optional override; defaults to now  # noqa: E501

        :param ts: The ts of this MeasurementRequest.
        :type ts: datetime
        """

        self._ts = ts

    @property
    def run_id(self) -> str:
        """Gets the run_id of this MeasurementRequest.

        Optional; server will generate if absent  # noqa: E501

        :return: The run_id of this MeasurementRequest.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id: str):
        """Sets the run_id of this MeasurementRequest.

        Optional; server will generate if absent  # noqa: E501

        :param run_id: The run_id of this MeasurementRequest.
        :type run_id: str
        """

        self._run_id = run_id

    @property
    def src(self) -> NodeRef:
        """Gets the src of this MeasurementRequest.


        :return: The src of this MeasurementRequest.
        :rtype: NodeRef
        """
        return self._src

    @src.setter
    def src(self, src: NodeRef):
        """Sets the src of this MeasurementRequest.


        :param src: The src of this MeasurementRequest.
        :type src: NodeRef
        """
        if src is None:
            raise ValueError("Invalid value for `src`, must not be `None`")  # noqa: E501

        self._src = src

    @property
    def dst(self) -> NodeRef:
        """Gets the dst of this MeasurementRequest.


        :return: The dst of this MeasurementRequest.
        :rtype: NodeRef
        """
        return self._dst

    @dst.setter
    def dst(self, dst: NodeRef):
        """Sets the dst of this MeasurementRequest.


        :param dst: The dst of this MeasurementRequest.
        :type dst: NodeRef
        """
        if dst is None:
            raise ValueError("Invalid value for `dst`, must not be `None`")  # noqa: E501

        self._dst = dst

    @property
    def direction(self) -> str:
        """Gets the direction of this MeasurementRequest.

        Traffic direction label (used for throughput/latency plotting)  # noqa: E501

        :return: The direction of this MeasurementRequest.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction: str):
        """Sets the direction of this MeasurementRequest.

        Traffic direction label (used for throughput/latency plotting)  # noqa: E501

        :param direction: The direction of this MeasurementRequest.
        :type direction: str
        """
        allowed_values = ["forward", "reverse"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def raw(self) -> Dict[str, object]:
        """Gets the raw of this MeasurementRequest.

        Raw pScheduler result blob for this test  # noqa: E501

        :return: The raw of this MeasurementRequest.
        :rtype: Dict[str, object]
        """
        return self._raw

    @raw.setter
    def raw(self, raw: Dict[str, object]):
        """Sets the raw of this MeasurementRequest.

        Raw pScheduler result blob for this test  # noqa: E501

        :param raw: The raw of this MeasurementRequest.
        :type raw: Dict[str, object]
        """
        if raw is None:
            raise ValueError("Invalid value for `raw`, must not be `None`")  # noqa: E501

        self._raw = raw
