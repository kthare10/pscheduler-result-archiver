from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from archiver.openapi_server.models.base_model import Model
from archiver.openapi_server import util


class Metric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, value=None, unit=None):  # noqa: E501
        """Metric - a model defined in OpenAPI

        :param name: The name of this Metric.  # noqa: E501
        :type name: str
        :param value: The value of this Metric.  # noqa: E501
        :type value: float
        :param unit: The unit of this Metric.  # noqa: E501
        :type unit: str
        """
        self.openapi_types = {
            'name': str,
            'value': float,
            'unit': str
        }

        self.attribute_map = {
            'name': 'name',
            'value': 'value',
            'unit': 'unit'
        }

        self._name = name
        self._value = value
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt) -> 'Metric':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Metric of this Metric.  # noqa: E501
        :rtype: Metric
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Metric.

        Metric name (e.g., throughput_mbps, rtt_ms, loss_pct, mtu_bytes, hop_count)  # noqa: E501

        :return: The name of this Metric.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Metric.

        Metric name (e.g., throughput_mbps, rtt_ms, loss_pct, mtu_bytes, hop_count)  # noqa: E501

        :param name: The name of this Metric.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def value(self) -> float:
        """Gets the value of this Metric.


        :return: The value of this Metric.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this Metric.


        :param value: The value of this Metric.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def unit(self) -> str:
        """Gets the unit of this Metric.

        mbps | ms | pct | bytes | count | ...  # noqa: E501

        :return: The unit of this Metric.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this Metric.

        mbps | ms | pct | bytes | count | ...  # noqa: E501

        :param unit: The unit of this Metric.
        :type unit: str
        """

        self._unit = unit
