from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from archiver.openapi_server.models.base_model import Model
from archiver.openapi_server.models.status409_conflict_errors import Status409ConflictErrors
from archiver.openapi_server import util

from archiver.openapi_server.models.status409_conflict_errors import Status409ConflictErrors  # noqa: E501

class Status409Conflict(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors=None, type='error', size=1, status=409):  # noqa: E501
        """Status409Conflict - a model defined in OpenAPI

        :param errors: The errors of this Status409Conflict.  # noqa: E501
        :type errors: List[Status409ConflictErrors]
        :param type: The type of this Status409Conflict.  # noqa: E501
        :type type: str
        :param size: The size of this Status409Conflict.  # noqa: E501
        :type size: int
        :param status: The status of this Status409Conflict.  # noqa: E501
        :type status: int
        """
        self.openapi_types = {
            'errors': List[Status409ConflictErrors],
            'type': str,
            'size': int,
            'status': int
        }

        self.attribute_map = {
            'errors': 'errors',
            'type': 'type',
            'size': 'size',
            'status': 'status'
        }

        self._errors = errors
        self._type = type
        self._size = size
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Status409Conflict':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The status_409_conflict of this Status409Conflict.  # noqa: E501
        :rtype: Status409Conflict
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self) -> List[Status409ConflictErrors]:
        """Gets the errors of this Status409Conflict.


        :return: The errors of this Status409Conflict.
        :rtype: List[Status409ConflictErrors]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: List[Status409ConflictErrors]):
        """Sets the errors of this Status409Conflict.


        :param errors: The errors of this Status409Conflict.
        :type errors: List[Status409ConflictErrors]
        """

        self._errors = errors

    @property
    def type(self) -> str:
        """Gets the type of this Status409Conflict.


        :return: The type of this Status409Conflict.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Status409Conflict.


        :param type: The type of this Status409Conflict.
        :type type: str
        """

        self._type = type

    @property
    def size(self) -> int:
        """Gets the size of this Status409Conflict.


        :return: The size of this Status409Conflict.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this Status409Conflict.


        :param size: The size of this Status409Conflict.
        :type size: int
        """

        self._size = size

    @property
    def status(self) -> int:
        """Gets the status of this Status409Conflict.


        :return: The status of this Status409Conflict.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status: int):
        """Sets the status of this Status409Conflict.


        :param status: The status of this Status409Conflict.
        :type status: int
        """

        self._status = status
